"""–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞."""
from __future__ import annotations

import asyncio
from collections import Counter
from typing import Any

from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Document, Message

from cortexwatcher.bot.security import RateLimiter, is_chat_allowed
from cortexwatcher.bot.validation import AttachmentValidationError, validate_document
from cortexwatcher.logging import logger
from cortexwatcher.parsers import detect_format, parse_gelf, parse_json_lines, parse_syslog, parse_wazuh_alert
from cortexwatcher.workers.tasks import enqueue_ingest

router = Router()
limiter = RateLimiter()


@router.message(Command("start"))
async def start_command(message: Message) -> None:
    """–í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""

    if not _authorize(message):
        return
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø CortexWatcher. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–≥ –∞–±–æ —Ñ–∞–π–ª, —ñ —è –¥–æ–¥–∞–º –π–æ–≥–æ –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.",
    )


@router.message(Command("help"))
async def help_command(message: Message) -> None:
    """–û–ø–∏—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π."""

    if not _authorize(message):
        return
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ª–æ–≥—ñ–≤ —á–∏ —Ñ–∞–π–ª (.log/.json/.ndjson/.gz/.zip). –ö–æ–º–∞–Ω–¥–∞ /status –ø–æ–∫–∞–∂–µ –º–µ—Ç—Ä–∏–∫–∏.",
    )


@router.message(Command("status"))
async def status_command(message: Message) -> None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—Å—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–∏–º—á–∞—Å–æ–≤–æ)."""

    if not _authorize(message):
        return
    metrics = enqueue_ingest("status", payload={"chat_id": message.chat.id}, immediate=True)
    await message.answer(f"–ü–æ–¥—ñ–π –∑–∞ —Ö–≤–∏–ª–∏–Ω—É: {metrics.get('events_per_min', 0)}\n–ê–ª–µ—Ä—Ç—ñ–≤: {metrics.get('alerts', 0)}")


@router.message()
async def handle_message(message: Message) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""

    if not _authorize(message):
        return
    if message.document:
        await _handle_document(message, message.document)
        return
    if message.text:
        await _handle_text(message, message.text)


async def _handle_document(message: Message, document: Document) -> None:
    """–°–∫–∞—á—É—î –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∞ –ø–µ—Ä–µ–¥–∞—î –≤ —á–µ—Ä–≥—É."""

    if document.file_size and document.file_size > 20 * 1024 * 1024:
        await message.reply("–§–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë.")
        return
    file = await message.bot.download(document)
    content = file.read()
    try:
        await validate_document(document, content)
    except AttachmentValidationError as error:
        logger.warning(
            "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É",
            chat_id=message.chat.id,
            message_id=message.message_id,
            reason=error.user_message,
        )
        await message.reply(error.user_message)
        return
    summary = await _summarize(content.decode(errors="ignore"))
    await message.reply(summary, parse_mode=ParseMode.MARKDOWN)
    enqueue_ingest(
        source="telegram",
        payload={
            "chat_id": message.chat.id,
            "message_id": message.message_id,
            "filename": document.file_name,
            "content": content.decode(errors="ignore"),
        },
    )


async def _handle_text(message: Message, text: str) -> None:
    summary = await _summarize(text)
    await message.reply(summary, parse_mode=ParseMode.MARKDOWN)
    enqueue_ingest(
        source="telegram",
        payload={
            "chat_id": message.chat.id,
            "message_id": message.message_id,
            "content": text,
        },
    )


async def _summarize(content: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª–æ–≥—ñ–≤."""

    return await asyncio.to_thread(_summarize_sync, content)


def _summarize_sync(content: str) -> str:
    fmt = detect_format(content)
    parsed: list[dict[str, Any]]
    if fmt == "syslog":
        parsed = parse_syslog(content)
    elif fmt == "json_lines":
        parsed = parse_json_lines(content)
    elif fmt == "gelf":
        parsed = parse_gelf(content)
    elif fmt == "wazuh":
        parsed = parse_wazuh_alert(content)
    else:
        parsed = []
    apps = Counter(item.get("app") for item in parsed if item.get("app"))
    severities = Counter(item.get("severity") for item in parsed if item.get("severity"))
    top_apps = ", ".join(f"{app}: {count}" for app, count in apps.most_common(3)) or "–Ω–µ–º–∞—î"
    top_sev = ", ".join(f"{sev}: {count}" for sev, count in severities.most_common(3)) or "–Ω–µ–º–∞—î"
    return (
        f"üìÑ –†—è–¥–∫—ñ–≤: {len(content.splitlines())}\n"
        f"–§–æ—Ä–º–∞—Ç: {fmt}\n"
        f"–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π: {len(parsed)}\n"
        f"–¢–æ–ø –∑–∞—Å—Ç–æ—Å—É–Ω–∫—ñ–≤: {top_apps}\n"
        f"–¢–æ–ø —Ä—ñ–≤–Ω—ñ–≤: {top_sev}"
    )


def _authorize(message: Message) -> bool:
    chat_id = message.chat.id
    if not is_chat_allowed(chat_id):
        logger.warning("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ —á–∞—Ç—É", chat_id=chat_id)
        return False
    if not limiter.allowed(chat_id):
        asyncio.create_task(message.reply("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."))
        return False
    return True


__all__ = ["router"]
